/*
 * This source file was generated by the Gradle 'init' task
 */
package hu.otp.mobil;

import hu.otp.mobil.model.CustomerTotalSpentRecord;
import hu.otp.mobil.repositority.*;
import hu.otp.mobil.service.DataProcessService;
import lombok.extern.slf4j.Slf4j;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

@Slf4j
public class App {
    private static final String CUSTOMER_CSV = "customer.csv";
    private static final String PAYMENTS_CSV = "payments.csv";
    private static final String CUSTOMER_SPENT_CSV = "report01.csv";
    private static final String TOP_SPENDER_CSV = "top.csv";
    private static final String WEBSHOP_INCOME_CSV = "report02.csv";

    private Optional<DataProcessService> initDataProcessService() {
        try (
                var customerFileReader = new FileReader(CUSTOMER_CSV);
                var paymentsFileReader = new FileReader(PAYMENTS_CSV);
        ) {
            var customerReader = new CustomerReader(customerFileReader);
            var customers = customerReader.readAllCustomers();
            var paymentsReader = new PaymentReader(paymentsFileReader, customers);
            return Optional.of(new DataProcessService(customers, paymentsReader.readPayments()));
        } catch (IOException e) {
            log.error("Could not read data from files: " + e.getMessage(), e);
        }

        return Optional.empty();
    }

    private void writeCustomerSpentReport(DataProcessService service) {
        try(
                var reportFileWriter = new FileWriter(CUSTOMER_SPENT_CSV);
                var reportWriter = new CustomerSpentReportWriter(reportFileWriter)
        ) {
            for (var customerTotalSpentRecord:service.getCustomerTotalSpentRecords()) {
                reportWriter.writeEntry(customerTotalSpentRecord);
            }
        }catch (IOException e) {
            log.error("Could not write data to file: " + e.getMessage(), e);
        }

    }

    private void writeTopSpenderReport(DataProcessService service){
        try(
                var reportFileWriter = new FileWriter(TOP_SPENDER_CSV);
                var reportWriter = new TopSpendersReportWriter(reportFileWriter)
        ) {
            for (var customerTotalSpentRecord:service.getTopSpenders()) {
                reportWriter.writeEntry(customerTotalSpentRecord);
            }
        }catch (IOException e) {
            log.error("Could not write data to file: " + e.getMessage(), e);
        }
    }

    private void writeWebShopIncomeReport(DataProcessService service) {
        try(
            var reportFileWriter = new FileWriter(WEBSHOP_INCOME_CSV);
            var reportWriter = new WebShopIncomeSummaryWriter(reportFileWriter)
        ) {
            for (var webshopIncomeSummaryRecord:service.getWebShopIncomeSummaryRecords()) {
                reportWriter.writeRecord(webshopIncomeSummaryRecord);
            }
        } catch (IOException e) {
            log.error("Could not write data to file: " + e.getMessage(), e);
        }
    }

    private void writeResults(DataProcessService service) {
        var webShopIncomeReportTask = CompletableFuture.runAsync(() -> writeWebShopIncomeReport(service));
        writeCustomerSpentReport(service);
        writeTopSpenderReport(service);
        webShopIncomeReportTask.join();
    }

    private void run() {
        initDataProcessService()
                .ifPresent(this::writeResults);
    }

    public static void main(String[] args) {
        new App().run();
    }
}
